diff --git a/src/decompiler/prettyprint.cc b/src/decompiler/prettyprint.cc
index 49b30e4..ea37f79 100644
--- a/src/decompiler/prettyprint.cc
+++ b/src/decompiler/prettyprint.cc
@@ -208,6 +208,14 @@ void EmitXml::tagFuncName(const char *ptr,syntax_highlight hl,
   *s << "</funcname>";
 }
 
+/// \brief Emit a function noreturn identifier
+///
+/// An identifier string representing  noreturn information of the function is emitted
+void EmitXml::tagNoreturn(void)
+{
+  *s << "<noreturn " << highlight[(int4)no_color] << '>' << " noreturn </noreturn>";
+}
+
 /// \brief Emit a data-type identifier
 ///
 /// A string representing the name of a data-type, as appropriate for the source language
@@ -415,6 +423,9 @@ void TokenSplit::print(EmitXml *emit) const
   case fnam_t:	// tagFuncName
     emit->tagFuncName(tok.c_str(),hl,ptr_second.fd,op);
     break;
+  case noret_t:
+    emit->tagNoreturn();
+    break;
   case type_t:	// tagType
     emit->tagType(tok.c_str(),hl,ptr_second.ct);
     break;
@@ -1045,6 +1056,15 @@ void EmitPrettyPrint::tagFuncName(const char *ptr,syntax_highlight hl,const Func
   scan();
 }
 
+void EmitPrettyPrint::tagNoreturn(void)
+{
+  checkstring();
+  TokenSplit &tok( tokqueue.push() );
+  tok.tagNoreturn();
+  scan();
+}
+
+
 void EmitPrettyPrint::tagType(const char *ptr,syntax_highlight hl,const Datatype *ct)
 
 {
diff --git a/src/decompiler/prettyprint.hh b/src/decompiler/prettyprint.hh
index 5874631..b05eadf 100644
--- a/src/decompiler/prettyprint.hh
+++ b/src/decompiler/prettyprint.hh
@@ -120,6 +120,7 @@ public:
 			    const Varnode *vn,const PcodeOp *op);
   virtual void tagOp(const char *ptr,syntax_highlight hl,const PcodeOp *op);
   virtual void tagFuncName(const char *ptr,syntax_highlight hl,const Funcdata *fd,const PcodeOp *op);
+  virtual void tagNoreturn(void);
   virtual void tagType(const char *ptr,syntax_highlight hl,const Datatype *ct);
   virtual void tagField(const char *ptr,syntax_highlight hl,const Datatype *ct,int4 off);
   virtual void tagComment(const char *ptr,syntax_highlight hl,const AddrSpace *spc,uintb off);
@@ -268,6 +269,8 @@ public:
     *s << ptr; }
   virtual void tagFuncName(const char *ptr,syntax_highlight hl,const Funcdata *fd,const PcodeOp *op) {
     *s << ptr; }
+  virtual void tagNoreturn(void) {
+    *s << " noreturn ";}
   virtual void tagType(const char *ptr,syntax_highlight hl,const Datatype *ct) {
     *s << ptr; }
   virtual void tagField(const char *ptr,syntax_highlight hl,const Datatype *ct,int4 off) {
@@ -334,6 +337,7 @@ public:
     vari_t,		///< A variable identifier
     op_t,		///< An operator
     fnam_t,		///< A function identifier
+    noret_t,		///< A function noreturn identifier
     type_t,		///< A data-type identifier
     field_t,		///< A field name for a structured data-type
     comm_t,		///< Part of a comment block
@@ -489,6 +493,10 @@ public:
     tok = ptr; size = tok.size();
     tagtype=fnam_t; delimtype=tokenstring; hl=h; ptr_second.fd=f; op=o; }
 
+  /// \brief Create a function noreturn identifiertoken
+  void tagNoreturn(void) {
+    tagtype=noret_t; delimtype=tokenstring; }
+
   /// \brief Create a data-type identifier token
   ///
   /// \param ptr is the character data for the identifier
@@ -772,6 +780,7 @@ public:
 			   const Varnode *vn,const PcodeOp *op);
   virtual void tagOp(const char *ptr,syntax_highlight hl,const PcodeOp *op);
   virtual void tagFuncName(const char *ptr,syntax_highlight hl,const Funcdata *fd,const PcodeOp *op);
+  virtual void tagNoreturn(void);
   virtual void tagType(const char *ptr,syntax_highlight hl,const Datatype *ct);
   virtual void tagField(const char *ptr,syntax_highlight hl,const Datatype *ct,int4 off);
   virtual void tagComment(const char *ptr,syntax_highlight hl,
diff --git a/src/decompiler/printc.cc b/src/decompiler/printc.cc
index cc002a2..3b096c1 100644
--- a/src/decompiler/printc.cc
+++ b/src/decompiler/printc.cc
@@ -2312,7 +2312,9 @@ void PrintC::emitFunctionDeclaration(const Funcdata *fd)
   emitSymbolScope(fd->getSymbol());
   emit->tagFuncName(fd->getName().c_str(),EmitXml::funcname_color,
 		    fd,(PcodeOp *)0);
-
+  if (proto->isNoReturn()) {
+    emit->tagNoreturn();
+  }
   emit->spaces(function_call.spacing,function_call.bump);
   int4 id2 = emit->openParen('(');
   emit->spaces(0,function_call.bump);
